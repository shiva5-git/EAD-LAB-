#index.html
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Simple Calculator</title>
  <!-- Link external CSS -->
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <main class="calculator" role="application" aria-label="Calculator">
    <div class="screen">
      <div class="history" id="history" aria-hidden="true"></div>
      <div class="display" id="display">0</div>
    </div>

    <div class="keys">
      <button class="btn-ac" data-action="clear">AC</button>
      <button class="btn-op" data-action="back">⌫</button>
      <button class="btn-op" data-value="%">%</button>
      <button class="btn-op" data-value="/">÷</button>

      <button data-value="7">7</button>
      <button data-value="8">8</button>
      <button data-value="9">9</button>
      <button class="btn-op" data-value="*">×</button>

      <button data-value="4">4</button>
      <button data-value="5">5</button>
      <button data-value="6">6</button>
      <button class="btn-op" data-value="-">−</button>

      <button data-value="1">1</button>
      <button data-value="2">2</button>
      <button data-value="3">3</button>
      <button class="btn-op" data-value="+">+</button>

      <button class="btn-zero" data-value="0">0</button>
      <button data-value=".">.</button>
      <button class="btn-equals" data-action="equal">=</button>
    </div>
  </main>

  <script>
    (function(){
      const display = document.getElementById('display');
      const history = document.getElementById('history');
      const keys = document.querySelector('.keys');
      let current = '';
      let lastExpression = '';

      function updateScreen(){
        display.textContent = current || '0';
      }

      function safeEvaluate(expr){
        if(!/^[0-9+\\-*/%.()\\s]+$/.test(expr)) throw new Error('Invalid characters');
        const normalized = expr.replace(/%(?![0-9])/g, '/100').replace(/(\\d+)%/g, '($1/100)');
        return Function('return '+normalized)();
      }

      keys.addEventListener('click', e =>{
        const btn = e.target.closest('button');
        if(!btn) return;
        const val = btn.getAttribute('data-value');
        const action = btn.getAttribute('data-action');

        if(action === 'clear'){
          current = '';
          lastExpression = '';
          history.textContent = '';
          updateScreen();
          return;
        }
        if(action === 'back'){
          current = current.slice(0,-1);
          updateScreen();
          return;
        }
        if(action === 'equal'){
          try{
            if(!current) return;
            const result = safeEvaluate(current);
            lastExpression = current + ' = ' + result;
            history.textContent = lastExpression;
            current = String(result);
            updateScreen();
          }catch(err){
            display.textContent = 'Error';
            setTimeout(()=>{ current=''; updateScreen(); }, 900);
          }
          return;
        }

        if(val === '.'){
          const lastToken = current.split(/[-+/*()%\\s]/).pop();
          if(lastToken.includes('.')) return;
        }
        if(/^[0]$/.test(current) && /[0-9]/.test(val)){
          current = val;
        } else {
          current += val;
        }
        updateScreen();
      });

      window.addEventListener('keydown', e =>{
        if(e.key === 'Enter'){
          e.preventDefault();
          document.querySelector('[data-action="equal"]').click();
          return;
        }
        if(e.key === 'Backspace') { document.querySelector('[data-action="back"]').click(); return; }
        if(e.key === 'Escape') { document.querySelector('[data-action="clear"]').click(); return; }
        if(/^[0-9+\\-*/().%]$/.test(e.key)){
          const button = Array.from(document.querySelectorAll('button[data-value]')).find(b => b.getAttribute('data-value') === e.key);
          if(button) button.click();
          else {
            const mapping = {'*':'*','/':'/','+':'+','-':'-','.':'.','%':'%','(':'(',')':')'};
            if(mapping[e.key]){
              current += mapping[e.key]; updateScreen();
            }
          }
        }
      });

      updateScreen();
    })();
  </script>
</body>
</html>

#style.css
:root{
  --bg:#0f1724;
  --panel:#111827;
  --accent:#06b6d4;
  --btn:#1f2937;
  --btn-hover:#374151;
  --text:#e6eef6;
}
*{box-sizing:border-box}
body{
  margin:0;
  min-height:100vh;
  display:flex;
  align-items:center;
  justify-content:center;
  background:linear-gradient(135deg,#071428 0%, #09293a 100%);
  font-family:Inter, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
  color:var(--text);
  padding:20px;
}
.calculator{
  width:360px;
  border-radius:14px;
  padding:18px;
  background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));
  box-shadow: 0 8px 30px rgba(2,6,23,0.6);
  backdrop-filter: blur(6px);
}
.screen{
  height:84px;
  background:var(--panel);
  border-radius:10px;
  padding:12px 14px;
  display:flex;
  flex-direction:column;
  justify-content:center;
  gap:6px;
  margin-bottom:12px;
  box-shadow: inset 0 -6px 18px rgba(2,6,23,0.6);
}
.screen .history{
  font-size:13px;
  opacity:0.6;
  height:18px;
  overflow:hidden;
  text-align:right;
}
.screen .display{
  font-size:28px;
  font-weight:600;
  text-align:right;
  letter-spacing:0.6px;
  white-space:nowrap;
  overflow:hidden;
  text-overflow:ellipsis;
}
.keys{
  display:grid;
  grid-template-columns: repeat(4,1fr);
  gap:10px;
}
button{
  height:60px;
  border-radius:10px;
  border:0;
  font-size:18px;
  cursor:pointer;
  background:var(--btn);
  color:var(--text);
  box-shadow: 0 4px 10px rgba(2,6,23,0.45);
  transition:transform .06s ease, background .12s ease;
}
button:active{transform:translateY(1px) scale(0.998)}
button:hover{background:var(--btn-hover)}

.btn-ac{background:linear-gradient(180deg,#ff6b6b,#ef4444);}
.btn-equals{grid-column: span 2; background:linear-gradient(180deg,var(--accent),#0891b2); font-weight:700;}
.btn-op{background:linear-gradient(180deg,#1b2430,#0f1724); opacity:0.95}
.btn-zero{grid-column: span 2;}

.small{font-size:14px; opacity:0.9}

@media (max-width:420px){
  .calculator{width:100%;}
  button{height:56px}
  .screen{height:72px}
}

